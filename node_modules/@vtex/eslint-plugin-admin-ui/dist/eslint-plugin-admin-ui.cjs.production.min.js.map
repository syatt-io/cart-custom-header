{"version":3,"file":"eslint-plugin-admin-ui.cjs.production.min.js","sources":["../src/configs/recommended.ts","../src/utils/logic/isPresent.ts","../src/utils/estree/isImportSpecifierNode.ts","../src/utils/estree/isFunctionNode.ts","../src/index.ts","../src/rules/create-tag-component-outside-render-phase.ts","../src/utils/react/isComponentName.ts","../src/utils/estree/getFunctionNodeName.ts"],"sourcesContent":["import type { Linter } from 'eslint'\n\nexport const recommended: Linter.BaseConfig = {\n  plugins: ['@vtex/admin-ui'],\n  rules: {\n    '@vtex/admin-ui/create-tag-component-outside-render-phase': 'error',\n  },\n}\n","export const isPresent = <T>(value: T): value is Exclude<T, null> =>\n  value !== null\n","import type * as ESTree from 'estree'\n\ntype ImportNode =\n  | ESTree.ImportSpecifier\n  | ESTree.ImportDefaultSpecifier\n  | ESTree.ImportNamespaceSpecifier\n\nexport const isImportSpecifierNode = (\n  node: ImportNode\n): node is ESTree.ImportSpecifier => {\n  return node.type === 'ImportSpecifier'\n}\n","import type * as ESTree from 'estree'\n\nexport const isFunctionNode = (node: ESTree.Node): node is ESTree.Function => {\n  return (\n    node.type === 'ArrowFunctionExpression' ||\n    node.type === 'FunctionExpression' ||\n    node.type === 'FunctionDeclaration'\n  )\n}\n","import { recommended } from './configs/recommended'\nimport { createTagComponentOutsideRenderPhase } from './rules/create-tag-component-outside-render-phase'\n\n// tsdx doesn't support we configure our tsconfig.json\n// to target module commonjs, so we need to manually\n// use module.exports here\nmodule.exports = {\n  configs: {\n    recommended,\n  },\n\n  // TODO: these rules could be auto-generated using fs+path,\n  // but tsdx doesn't works well with dynamic imports,\n  // so we need to change our build system first\n  rules: {\n    'create-tag-component-outside-render-phase':\n      createTagComponentOutsideRenderPhase,\n  },\n}\n","import type { Rule } from 'eslint'\nimport type * as ESTree from 'estree'\n\nimport { isPresent } from '../utils/logic/isPresent'\nimport { isImportSpecifierNode } from '../utils/estree/isImportSpecifierNode'\nimport { isComponentName } from '../utils/react/isComponentName'\nimport { getFunctionNodeName } from '../utils/estree/getFunctionNodeName'\nimport { isFunctionNode } from '../utils/estree/isFunctionNode'\n\nexport const createTagComponentOutsideRenderPhase: Rule.RuleModule = {\n  meta: {\n    docs: {\n      description:\n        'Avoid create custom components inside render phase of some component',\n      category: 'Best Practices',\n    },\n    schema: [],\n  },\n\n  create(context) {\n    const { scopeManager } = context.getSourceCode()\n\n    let tagImportNode: ESTree.ImportSpecifier | undefined\n\n    return {\n      ImportDeclaration(node) {\n        if (node.source.value === '@vtex/admin-ui') {\n          tagImportNode = node.specifiers\n            .filter(isImportSpecifierNode)\n            .find((specifier) => {\n              return specifier.imported.name === 'tag'\n            })\n        }\n      },\n\n      ':function CallExpression': function (\n        node: ESTree.CallExpression & Rule.Node\n      ) {\n        if (!tagImportNode) return\n\n        const ancestors = context.getAncestors()\n\n        const functionNode = ancestors.reverse().find(isFunctionNode)!\n        const functionName = getFunctionNodeName(functionNode)\n\n        if (!isComponentName(functionName)) return\n\n        const scopes = ancestors\n          .map((node) => scopeManager.acquire(node))\n          .filter(isPresent)\n\n        const hasShadowingTagDeclaration = scopes.some((scope) =>\n          scope.set.get(tagImportNode!.local.name)\n        )\n\n        if (hasShadowingTagDeclaration) return\n\n        if (\n          node.callee.type === 'Identifier' &&\n          node.callee.name === tagImportNode.local.name\n        ) {\n          context.report({\n            node,\n            message:\n              'Do not create custom components inside render phase of some component',\n          })\n        }\n      },\n    }\n  },\n}\n","export const isComponentName = (name: string) =>\n  name[0] === name[0].toUpperCase()\n","import type { Rule } from 'eslint'\nimport type { Node } from 'estree'\n\nexport const getFunctionNodeName = (node: Node) => {\n  if (node.type === 'FunctionDeclaration') {\n    return node.id?.name ?? ''\n  }\n\n  const { parent } = node as Rule.Node\n\n  if (parent.type === 'VariableDeclarator' && parent.id.type === 'Identifier') {\n    return parent.id.name\n  }\n\n  return ''\n}\n"],"names":["isPresent","value","isImportSpecifierNode","node","type","isFunctionNode","module","exports","configs","recommended","plugins","rules","meta","docs","description","category","schema","create","context","tagImportNode","scopeManager","getSourceCode","ImportDeclaration","source","specifiers","filter","find","specifier","imported","name","ancestors","getAncestors","id","_node$id","parent","getFunctionNodeName","reverse","toUpperCase","map","acquire","some","scope","set","get","local","callee","report","message"],"mappings":"aAEO,ICFMA,EAAY,SAAIC,UACjB,OAAVA,GCMWC,EAAwB,SACnCC,SAEqB,oBAAdA,EAAKC,MCRDC,EAAiB,SAACF,SAEb,4BAAdA,EAAKC,MACS,uBAAdD,EAAKC,MACS,wBAAdD,EAAKC,MCATE,OAAOC,QAAU,CACfC,QAAS,CACPC,YJN0C,CAC5CC,QAAS,CAAC,kBACVC,MAAO,4DACuD,WIS9DA,MAAO,6CCL4D,CACnEC,KAAM,CACJC,KAAM,CACJC,YACE,uEACFC,SAAU,kBAEZC,OAAQ,IAGVC,gBAAOC,OAGDC,EAFIC,EAAiBF,EAAQG,gBAAzBD,mBAID,CACLE,2BAAkBnB,GACU,mBAAtBA,EAAKoB,OAAOtB,QACdkB,EAAgBhB,EAAKqB,WAClBC,OAAOvB,GACPwB,MAAK,SAACC,SAC8B,QAA5BA,EAAUC,SAASC,qCAKN,SAC1B1B,MAEKgB,OCtCmBU,EDwClBC,EAAYZ,EAAQa,gBCxCFF,ECGG,SAAC1B,cAChB,wBAAdA,EAAKC,gCACAD,EAAK6B,uBAALC,EAASJ,oBAAQ,OAGlBK,EAAW/B,EAAX+B,aAEY,uBAAhBA,EAAO9B,MAAoD,eAAnB8B,EAAOF,GAAG5B,KAC7C8B,EAAOF,GAAGH,KAGZ,GF6BoBM,CADAL,EAAUM,UAAUV,KAAKrB,KCzC/C,KAAOwB,EAAK,GAAGQ,gBD8CCP,EACZQ,KAAI,SAACnC,UAASiB,EAAamB,QAAQpC,MACnCsB,OAAOzB,GAEgCwC,MAAK,SAACC,UAC9CA,EAAMC,IAAIC,IAAIxB,EAAeyB,MAAMf,UAMd,eAArB1B,EAAK0C,OAAOzC,MACZD,EAAK0C,OAAOhB,OAASV,EAAcyB,MAAMf,MAEzCX,EAAQ4B,OAAO,CACb3C,KAAAA,EACA4C,QACE"}