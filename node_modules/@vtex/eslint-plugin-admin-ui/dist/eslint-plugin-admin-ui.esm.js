var recommended = {
  plugins: ['@vtex/admin-ui'],
  rules: {
    '@vtex/admin-ui/create-tag-component-outside-render-phase': 'error'
  }
};

var isPresent = function isPresent(value) {
  return value !== null;
};

var isImportSpecifierNode = function isImportSpecifierNode(node) {
  return node.type === 'ImportSpecifier';
};

var isComponentName = function isComponentName(name) {
  return name[0] === name[0].toUpperCase();
};

var getFunctionNodeName = function getFunctionNodeName(node) {
  if (node.type === 'FunctionDeclaration') {
    var _node$id$name, _node$id;

    return (_node$id$name = (_node$id = node.id) === null || _node$id === void 0 ? void 0 : _node$id.name) !== null && _node$id$name !== void 0 ? _node$id$name : '';
  }

  var parent = node.parent;

  if (parent.type === 'VariableDeclarator' && parent.id.type === 'Identifier') {
    return parent.id.name;
  }

  return '';
};

var isFunctionNode = function isFunctionNode(node) {
  return node.type === 'ArrowFunctionExpression' || node.type === 'FunctionExpression' || node.type === 'FunctionDeclaration';
};

var createTagComponentOutsideRenderPhase = {
  meta: {
    docs: {
      description: 'Avoid create custom components inside render phase of some component',
      category: 'Best Practices'
    },
    schema: []
  },
  create: function create(context) {
    var _context$getSourceCod = context.getSourceCode(),
        scopeManager = _context$getSourceCod.scopeManager;

    var tagImportNode;
    return {
      ImportDeclaration: function ImportDeclaration(node) {
        if (node.source.value === '@vtex/admin-ui') {
          tagImportNode = node.specifiers.filter(isImportSpecifierNode).find(function (specifier) {
            return specifier.imported.name === 'tag';
          });
        }
      },
      ':function CallExpression': function functionCallExpression(node) {
        if (!tagImportNode) return;
        var ancestors = context.getAncestors();
        var functionNode = ancestors.reverse().find(isFunctionNode);
        var functionName = getFunctionNodeName(functionNode);
        if (!isComponentName(functionName)) return;
        var scopes = ancestors.map(function (node) {
          return scopeManager.acquire(node);
        }).filter(isPresent);
        var hasShadowingTagDeclaration = scopes.some(function (scope) {
          return scope.set.get(tagImportNode.local.name);
        });
        if (hasShadowingTagDeclaration) return;

        if (node.callee.type === 'Identifier' && node.callee.name === tagImportNode.local.name) {
          context.report({
            node: node,
            message: 'Do not create custom components inside render phase of some component'
          });
        }
      }
    };
  }
};

// to target module commonjs, so we need to manually
// use module.exports here

module.exports = {
  configs: {
    recommended: recommended
  },
  // TODO: these rules could be auto-generated using fs+path,
  // but tsdx doesn't works well with dynamic imports,
  // so we need to change our build system first
  rules: {
    'create-tag-component-outside-render-phase': createTagComponentOutsideRenderPhase
  }
};
//# sourceMappingURL=eslint-plugin-admin-ui.esm.js.map
