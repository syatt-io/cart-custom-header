import { useEffect, useState } from 'react'
import type { Dispatch } from 'react'

import { useOrderQueue, useQueueStatus } from '../OrderQueue'
import { TASK_CANCELLED_CODE } from '../constants'
import type { OrderForm, Message, OrderFormUpdate } from '../typings'

export interface ToastContext {
  showToast: (message: string) => void
  toastState: {
    isToastVisible?: boolean
  }
}

export interface CreateUseMessagesParams {
  useToast: () => ToastContext
  useClearOrderFormMessages: () => (options: {
    orderFormId: string
  }) => Promise<any>
}

export const createUseMessages = ({
  useClearOrderFormMessages,
  useToast,
}: CreateUseMessagesParams) => {
  const useOrderFormMessages = (
    orderForm: OrderForm,
    setOrderForm: Dispatch<OrderFormUpdate<OrderForm>>
  ) => {
    const [messages, setMessages] = useState<Message[]>([])
    const { showToast, toastState } = useToast()
    const { enqueue } = useOrderQueue()
    const queueStatusRef = useQueueStatus()
    const clearOrderFormMessages = useClearOrderFormMessages()

    useEffect(() => {
      if (toastState.isToastVisible || !messages.length) {
        return
      }

      showToast(messages[0].text!)
      setMessages((queue) => queue.slice(1))
    }, [showToast, toastState.isToastVisible, messages])

    useEffect(() => {
      if (!orderForm.messages?.generalMessages?.length) {
        return
      }

      setMessages((prevMessages) =>
        prevMessages.concat(orderForm.messages?.generalMessages ?? [])
      )

      setOrderForm((prevOrderForm) => {
        return {
          ...prevOrderForm,
          messages: {
            ...prevOrderForm.messages,
            generalMessages: [],
          },
        }
      })

      const enqueuePromise = enqueue(async () => {
        const { data } = await clearOrderFormMessages({
          orderFormId: orderForm.id,
        })

        return data!.clearOrderFormMessages
      })

      enqueuePromise.then(
        (updatedOrderForm) => {
          if (queueStatusRef.current === 'Fulfilled') {
            setOrderForm(updatedOrderForm)
          }
        },
        (err) => {
          if (err.code === TASK_CANCELLED_CODE) {
            return
          }

          throw err
        }
      )
    }, [
      clearOrderFormMessages,
      enqueue,
      orderForm.id,
      orderForm.messages,
      queueStatusRef,
      setOrderForm,
    ])
  }

  return useOrderFormMessages
}
