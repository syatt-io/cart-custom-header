declare type Maybe<T> = T | null | undefined;
export interface Message {
    code?: Maybe<string>;
    status?: Maybe<string>;
    text?: Maybe<string>;
}
export interface OrderForm {
    id: string;
    value: number;
    messages: Maybe<{
        generalMessages: Maybe<Message[]>;
    }>;
}
export declare type OrderFormUpdate<O> = Partial<O> | Partial<OrderForm> | ((prevOrderForm: O) => Partial<O> | Partial<OrderForm>);
export declare type QueueStatus = 'Pending' | 'Fulfilled';
export declare type PossibleOrderForms<O> = OrderForm & O;
export interface Context<O extends OrderForm> {
    loading: boolean;
    setOrderForm: (nextValue: OrderFormUpdate<PossibleOrderForms<O>>) => void;
    error: any | undefined;
    orderForm: PossibleOrderForms<O>;
}
export {};
//# sourceMappingURL=index.d.ts.map