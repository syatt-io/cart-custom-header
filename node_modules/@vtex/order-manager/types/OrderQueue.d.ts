import type { ReactNode, VFC, RefObject } from 'react';
import type { OrderForm, QueueStatus } from './typings';
import type { CancellablePromiseLike } from './modules/SequentialTaskQueue';
declare type ListenFunction = (event: QueueStatus, callback: () => void) => () => void;
export interface Context<O extends OrderForm> {
    enqueue: (task: () => Promise<O>, id?: string) => CancellablePromiseLike<O>;
    listen: ListenFunction;
    isWaiting: (id: string) => boolean;
    status: RefObject<QueueStatus>;
}
export interface OrderQueueProviderProps {
    children: ReactNode;
}
export declare const useQueueStatus: () => RefObject<QueueStatus>;
export declare const OrderQueueProvider: VFC<OrderQueueProviderProps>;
export declare function useOrderQueue<O extends OrderForm>(): Context<O>;
export {};
//# sourceMappingURL=OrderQueue.d.ts.map