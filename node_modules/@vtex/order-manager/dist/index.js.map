{"version":3,"file":"index.js","sources":["../src/modules/SequentialTaskQueue.ts","../src/constants.ts","../src/modules/TaskQueue.ts","../src/OrderQueue.tsx","../src/modules/createUseMessages.tsx","../src/utils/heuristics.ts","../src/modules/OrderForm.tsx","../src/modules/createOrderForm.tsx","../src/createOrderFormProvider.tsx"],"sourcesContent":["// Adapted from https://github.com/BalassaMarton/sequential-task-queue/blob/master/src/sequential-task-queue.ts\n\n/**\n * Represents an object that schedules a function for asynchronous execution.\n * The default implementation used by {@link SequentialTaskQueue} calls {@link setImmediate} when available,\n * and {@link setTimeout} otherwise.\n * @see {@link SequentialTaskQueue.defaultScheduler}\n * @see {@link TaskQueueOptions.scheduler}\n */\nexport interface Scheduler {\n  /**\n   * Schedules a callback for asynchronous execution.\n   */\n  schedule(callback: () => void): void\n}\n\n/**\n * Object used for passing configuration options to the {@link SequentialTaskQueue} constructor.\n */\nexport interface SequentialTaskQueueOptions {\n  /**\n   * Assigns a name to the task queue for diagnostic purposes. The name does not need to be unique.\n   */\n  name?: string\n  /**\n   * Default timeout (in milliseconds) for tasks pushed to the queue. Default is 0 (no timeout).\n   *  */\n  timeout?: number\n  /**\n   * Scheduler used by the queue. Defaults to {@link SequentialTaskQueue.defaultScheduler}.\n   */\n  scheduler?: Scheduler\n}\n\n/**\n * Options object for individual tasks.\n */\nexport interface TaskOptions {\n  /**\n   * Timeout for the task, in milliseconds.\n   * */\n  timeout?: number\n\n  /**\n   * Arguments to pass to the task. Useful for minimalising the number of Function objects and closures created\n   * when pushing the same task multiple times, with different arguments.\n   *\n   * @example\n   * // The following code creates a single Function object and no closures:\n   * for (let i = 0; i < 100; i++)\n   *     queue.push(process, {args: [i]});\n   * function process(n) {\n   *     console.log(n);\n   * }\n   */\n  args?: any\n}\n\n/**\n * Provides the API for querying and invoking task cancellation.\n */\nexport interface CancellationToken {\n  /**\n   * When `true`, indicates that the task has been cancelled.\n   */\n  cancelled?: boolean\n  /**\n   * An arbitrary object representing the reason of the cancellation. Can be a member of the {@link cancellationTokenReasons} object or an `Error`, etc.\n   */\n  reason?: any\n  /**\n   * Cancels the task for which the cancellation token was created.\n   * @param reason - The reason of the cancellation, see {@link CancellationToken.reason}\n   */\n  cancel?: (reason?: any) => void\n}\n\n/**\n * Standard cancellation reasons. {@link SequentialTaskQueue} sets {@link CancellationToken.reason}\n * to one of these values when cancelling a task for a reason other than the user code calling\n * {@link CancellationToken.cancel}.\n */\nexport const cancellationTokenReasons = {\n  /** Used when the task was cancelled in response to a call to {@link SequentialTaskQueue.cancel} */\n  cancel: Object.create(null),\n  /** Used when the task was cancelled after its timeout has passed */\n  timeout: Object.create(null),\n}\n\n/**\n * Standard event names used by {@link SequentialTaskQueue}\n */\nexport const sequentialTaskQueueEvents = {\n  drained: 'drained',\n  error: 'error',\n  timeout: 'timeout',\n}\n\n/**\n * Promise interface with the ability to cancel.\n */\nexport interface CancellablePromiseLike<T> extends PromiseLike<T> {\n  /**\n   * Cancels (and consequently, rejects) the task associated with the Promise.\n   * @param reason - Reason of the cancellation. This value will be passed when rejecting this Promise.\n   */\n  cancel(reason?: any): void\n}\n\nfunction isPromise(obj: any): obj is PromiseLike<any> {\n  return obj && typeof obj.then === 'function'\n}\n\nfunction noop() {}\n\ntype EventListener = (value?: unknown) => void\n\n/**\n * FIFO task queue to run tasks in predictable order, without concurrency.\n */\nexport class SequentialTaskQueue {\n  public static defaultScheduler: Scheduler = {\n    schedule: (callback) => setTimeout(() => callback(), 0),\n  }\n\n  private queue: TaskEntry[] = []\n  private _isClosed = false\n  private waiters: EventListener[] = []\n  private defaultTimeout?: number\n  private currentTask?: TaskEntry\n  private scheduler: Scheduler\n  private events?: { [key: string]: EventListener[] }\n\n  private name: string\n\n  /** Indicates if the queue has been closed. Calling {@link SequentialTaskQueue.push} on a closed queue will result in an exception. */\n  public get isClosed() {\n    return this._isClosed\n  }\n\n  /**\n   * Creates a new instance of {@link SequentialTaskQueue}\n   * @param options - Configuration options for the task queue.\n   */\n  constructor(options?: SequentialTaskQueueOptions) {\n    if (!options) options = {}\n    this.defaultTimeout = options.timeout\n    this.name = options.name ?? 'SequentialTaskQueue'\n    this.scheduler = options.scheduler ?? SequentialTaskQueue.defaultScheduler\n  }\n\n  /**\n   * Adds a new task to the queue.\n   * @param {Function} task - The function to call when the task is run\n   * @param {TaskOptions} options - An object containing arguments and options for the task.\n   * @returns {CancellablePromiseLike<any>} A promise that can be used to await or cancel the task.\n   */\n  public push(\n    task: TaskEntryFn,\n    options?: TaskOptions\n  ): CancellablePromiseLike<any> {\n    if (this._isClosed) {\n      throw new Error(`${this.name} has been previously closed`)\n    }\n\n    const taskEntry: TaskEntry = {\n      callback: task,\n      args: options?.args\n        ? Array.isArray(options.args)\n          ? options.args.slice()\n          : [options.args]\n        : [],\n      timeout:\n        options?.timeout !== undefined ? options.timeout : this.defaultTimeout,\n      cancellationToken: {\n        cancel: (reason?) => this.cancelTask(taskEntry, reason),\n      },\n      resolve: undefined,\n      reject: undefined,\n    }\n\n    taskEntry.args.push(taskEntry.cancellationToken)\n    this.queue.push(taskEntry)\n    this.scheduler.schedule(() => this.next())\n    const result = (new Promise((resolve, reject) => {\n      taskEntry.resolve = resolve\n      taskEntry.reject = reject\n    }) as any) as CancellablePromiseLike<any>\n\n    result.cancel = (reason?: any) =>\n      taskEntry.cancellationToken.cancel!(reason)\n\n    return result\n  }\n\n  /**\n   * Cancels the currently running task (if any), and clears the queue.\n   * @returns {Promise} A Promise that is fulfilled when the queue is empty and the current task has been cancelled.\n   */\n  public cancel(): PromiseLike<any> {\n    if (this.currentTask) {\n      this.cancelTask(this.currentTask, cancellationTokenReasons.cancel)\n    }\n\n    const queue = this.queue.splice(0)\n\n    // Cancel all and emit a drained event if there were tasks waiting in the queue\n    if (queue.length) {\n      queue.forEach((task) =>\n        this.cancelTask(task, cancellationTokenReasons.cancel)\n      )\n      this.emit(sequentialTaskQueueEvents.drained)\n    }\n\n    return this.wait()\n  }\n\n  public indexOf(task: TaskEntryFn): number {\n    if (this.currentTask?.callback === task) {\n      return 0\n    }\n\n    const queueIndex = this.queue\n      // Skip cancelled tasks\n      .filter((taskEntry) => !taskEntry.cancellationToken?.cancelled)\n      .findIndex((taskEntry) => taskEntry.callback === task)\n\n    if (queueIndex < 0) {\n      // Task not found, return -1\n      return queueIndex\n    }\n\n    // The `currentTask` is also part of the queue, although\n    // it isn't in the `queue` array, so we should account for\n    // its existence and shift the index by 1 if it is set.\n    return queueIndex + (this.currentTask !== undefined ? 1 : 0)\n  }\n\n  /**\n   * Closes the queue, preventing new tasks to be added.\n   * Any calls to {@link SequentialTaskQueue.push} after closing the queue will result in an exception.\n   * @param {boolean} cancel - Indicates that the queue should also be cancelled.\n   * @returns {Promise} A Promise that is fulfilled when the queue has finished executing remaining tasks.\n   */\n  public close(cancel?: boolean): PromiseLike<any> {\n    if (!this._isClosed) {\n      this._isClosed = true\n      if (cancel) return this.cancel()\n    }\n\n    return this.wait()\n  }\n\n  /**\n   * Returns a promise that is fulfilled when the queue is empty.\n   * @returns {Promise}\n   */\n  public async wait(): Promise<any> {\n    if (!this.currentTask && this.queue.length === 0) return Promise.resolve()\n\n    return new Promise((resolve) => {\n      this.waiters.push(resolve)\n    })\n  }\n\n  /**\n   * Adds an event handler for a named event.\n   * @param {string} evt - Event name. See the readme for a list of valid events.\n   * @param {Function} handler - Event handler. When invoking the handler, the queue will set itself as the `this` argument of the call.\n   */\n  public on(evt: string, handler: EventListener) {\n    this.events = this.events ?? {}\n    ;(this.events[evt] || (this.events[evt] = [])).push(handler)\n  }\n\n  /**\n   * Adds a single-shot event handler for a named event.\n   * @param {string} evt - Event name. See the readme for a list of valid events.\n   * @param {Function} handler - Event handler. When invoking the handler, the queue will set itself as the `this` argument of the call.\n   */\n  public once(evt: string, handler: EventListener) {\n    const cb = (...args: any[]) => {\n      this.removeListener(evt, cb)\n      handler.apply(this, args)\n    }\n\n    this.on(evt, cb)\n  }\n\n  /**\n   * Removes an event handler.\n   * @param {string} evt - Event name\n   * @param {Function} handler - Event handler to be removed\n   */\n  public removeListener(evt: string, handler: EventListener) {\n    if (this.events) {\n      const list = this.events[evt]\n\n      if (list) {\n        let i = 0\n\n        while (i < list.length) {\n          if (list[i] === handler) list.splice(i, 1)\n          else i++\n        }\n      }\n    }\n  }\n\n  /** @see {@link SequentialTaskQueue.removeListener} */\n  public off(evt: string, handler: EventListener) {\n    return this.removeListener(evt, handler)\n  }\n\n  protected emit(evt: string, ...args: any[]) {\n    if (this.events?.[evt]) {\n      try {\n        this.events[evt].forEach((fn) => fn.apply(this, args))\n      } catch (e) {\n        console.error(`${this.name}: Exception in '${evt}' event handler`, e)\n      }\n    }\n  }\n\n  protected next() {\n    // Try running the next task, if not currently running one\n    if (!this.currentTask) {\n      let task = this.queue.shift()\n\n      // skip cancelled tasks\n      while (task?.cancellationToken.cancelled) task = this.queue.shift()\n      if (task) {\n        try {\n          this.currentTask = task\n          if (task.timeout) {\n            task.timeoutHandle = setTimeout(() => {\n              this.emit(sequentialTaskQueueEvents.timeout)\n              this.cancelTask(task!, cancellationTokenReasons.timeout)\n            }, task.timeout)\n          }\n\n          const res = task.callback.apply(undefined, task.args)\n\n          if (res && isPromise(res)) {\n            res.then(\n              (result) => {\n                task!.result = result\n                this.doneTask(task!)\n              },\n              (err) => {\n                this.doneTask(task!, err)\n              }\n            )\n          } else {\n            task.result = res\n            this.doneTask(task)\n          }\n        } catch (e) {\n          this.doneTask(task, e)\n        }\n      } else {\n        // queue is empty, call waiters\n        this.callWaiters()\n      }\n    }\n  }\n\n  private cancelTask(task: TaskEntry, reason?: any) {\n    task.cancellationToken.cancelled = true\n    task.cancellationToken.reason = reason\n    this.doneTask(task)\n  }\n\n  private doneTask(task: TaskEntry, error?: any) {\n    if (task.timeoutHandle) clearTimeout(task.timeoutHandle)\n    task.cancellationToken.cancel = noop\n    if (error) {\n      this.emit(sequentialTaskQueueEvents.error, error)\n      task.reject!.call(undefined, error)\n    } else if (task.cancellationToken.cancelled) {\n      task.reject!.call(undefined, task.cancellationToken.reason)\n    } else {\n      task.resolve!.call(undefined, task.result)\n    }\n\n    if (this.currentTask === task) {\n      this.currentTask = undefined\n      if (!this.queue.length) {\n        this.emit(sequentialTaskQueueEvents.drained)\n        this.callWaiters()\n      } else {\n        this.scheduler.schedule(() => this.next())\n      }\n    }\n  }\n\n  private callWaiters() {\n    const waiters = this.waiters.splice(0)\n\n    waiters.forEach((waiter) => waiter())\n  }\n}\n\ntype TaskEntryFn = () => void\n\ninterface TaskEntry {\n  args: any[]\n  callback: TaskEntryFn\n  timeout?: number\n  timeoutHandle?: any\n  cancellationToken: CancellationToken\n  result?: any\n  resolve?: (value: any | PromiseLike<any>) => void\n  reject?: (reason?: any) => void\n}\n\nSequentialTaskQueue.defaultScheduler = {\n  schedule:\n    typeof setImmediate === 'function'\n      ? (callback) => setImmediate(() => callback())\n      : (callback) => setTimeout(() => callback(), 0),\n}\n","export const TASK_CANCELLED_CODE = 'TASK_CANCELLED'\n\n// keep default value as -1 to indicate this order form\n// is the initial value (not yet synchonized with server).\nexport const UNSYNC_ORDER_FORM_VALUE = -1\n\nexport const DEFAULT_ORDER_FORM_ID = 'default-order-form'\n\nexport default {\n  TASK_CANCELLED_CODE,\n}\n\nexport const DEFAULT_ORDER_FORM = {\n  id: DEFAULT_ORDER_FORM_ID,\n  items: [],\n  value: UNSYNC_ORDER_FORM_VALUE,\n  totalizers: [],\n  marketingData: {},\n  canEditData: false,\n  loggedIn: false,\n  paymentData: {\n    isValid: false,\n    installmentOptions: [],\n    paymentSystems: [],\n    payments: [],\n    availableAccounts: [],\n  },\n  messages: {\n    couponMessages: [],\n    generalMessages: [],\n  },\n  shipping: {\n    isValid: false,\n    deliveryOptions: [],\n    pickupOptions: [],\n  },\n}\n","import type { CancellablePromiseLike } from './SequentialTaskQueue'\nimport { SequentialTaskQueue } from './SequentialTaskQueue'\nimport { TASK_CANCELLED_CODE } from '../constants'\nimport type { QueueStatus } from '../typings'\n\ninterface EnqueuedTask {\n  task: () => Promise<any>\n  promise: CancellablePromiseLike<any>\n}\n\nexport class TaskQueue {\n  private queue: SequentialTaskQueue\n  private taskIdMap: Record<string, EnqueuedTask>\n  private listeners: Record<QueueStatus, Array<() => any>>\n  private isEmpty: boolean\n\n  constructor() {\n    this.queue = new SequentialTaskQueue()\n    this.taskIdMap = {}\n    this.listeners = {} as any\n    this.isEmpty = true\n\n    this.queue.on('drained', () => {\n      this.isEmpty = true\n      this.emit('Fulfilled')\n    })\n  }\n\n  public isWaiting(id: string) {\n    return !!this.taskIdMap[id]\n  }\n\n  public enqueue(task: () => Promise<any>, id?: string) {\n    if (this.isEmpty) {\n      this.isEmpty = false\n      this.emit('Pending')\n    }\n\n    if (id && this.taskIdMap[id]) {\n      this.taskIdMap[id].promise.cancel()\n    }\n\n    const wrappedTask = () => {\n      if (id && this.taskIdMap[id]) {\n        delete this.taskIdMap[id]\n      }\n\n      return new Promise((resolve, reject) => {\n        const handleOnline = async () => {\n          try {\n            const result = await task()\n\n            resolve(result)\n          } catch (err) {\n            // we might have gone offline when this request was in-flight\n            // so we need to wait to be online again and replay this request\n            if (!navigator.onLine) {\n              return\n            }\n\n            reject(err)\n          }\n\n          window.removeEventListener('online', handleOnline)\n        }\n\n        window.addEventListener('online', handleOnline)\n\n        if (navigator.onLine) {\n          handleOnline()\n        }\n      })\n    }\n\n    const promise = this.queue.push(wrappedTask)\n    const cancelPromise = promise.cancel\n\n    promise.cancel = () =>\n      cancelPromise({\n        code: TASK_CANCELLED_CODE,\n        index: this.queue.indexOf(wrappedTask),\n      })\n\n    if (id) {\n      this.taskIdMap[id] = {\n        task,\n        promise,\n      }\n    }\n\n    return promise\n  }\n\n  public listen(event: QueueStatus, cb: () => any) {\n    if (!this.listeners[event]) {\n      this.listeners[event] = []\n    }\n\n    this.listeners[event].push(cb)\n\n    const unlisten = () => {\n      const index = this.listeners[event].indexOf(cb)\n\n      if (index !== -1) {\n        this.listeners[event].splice(index, 1)\n      }\n    }\n\n    return unlisten\n  }\n\n  private emit(event: QueueStatus) {\n    if (this.listeners[event]) {\n      this.listeners[event].forEach((cb) => cb())\n    }\n  }\n}\n","import type { ReactNode, VFC, RefObject } from 'react'\nimport React, {\n  useLayoutEffect,\n  createContext,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\n\nimport type { OrderForm, QueueStatus } from './typings'\nimport { TaskQueue } from './modules/TaskQueue'\nimport type { CancellablePromiseLike } from './modules/SequentialTaskQueue'\n\ntype ListenFunction = (event: QueueStatus, callback: () => void) => () => void\n\nexport interface Context<O extends OrderForm> {\n  enqueue: (task: () => Promise<O>, id?: string) => CancellablePromiseLike<O>\n  listen: ListenFunction\n  isWaiting: (id: string) => boolean\n  status: RefObject<QueueStatus>\n}\n\nexport interface OrderQueueProviderProps {\n  children: ReactNode\n}\n\nconst OrderQueueContext = createContext<Context<OrderForm> | undefined>(\n  undefined\n)\n\nexport const useQueueStatus = () => {\n  const { status } = useOrderQueue()\n\n  return status\n}\n\nexport const OrderQueueProvider: VFC<OrderQueueProviderProps> = ({\n  children,\n}) => {\n  const [queue] = useState(() => new TaskQueue())\n  const status = useRef<QueueStatus>('Fulfilled')\n\n  useLayoutEffect(() => {\n    const unlisten = queue.listen('Pending', () => (status.current = 'Pending'))\n\n    return unlisten\n  }, [queue])\n\n  useLayoutEffect(() => {\n    const unlisten = queue.listen(\n      'Fulfilled',\n      () => (status.current = 'Fulfilled')\n    )\n\n    return unlisten\n  }, [queue])\n\n  const value = useMemo(\n    () => ({\n      enqueue: queue.enqueue.bind(queue),\n      listen: queue.listen.bind(queue),\n      isWaiting: queue.isWaiting.bind(queue),\n      status,\n    }),\n    [queue, status]\n  )\n\n  return (\n    <OrderQueueContext.Provider value={value}>\n      {children}\n    </OrderQueueContext.Provider>\n  )\n}\n\nexport function useOrderQueue<O extends OrderForm>() {\n  const context = useContext(OrderQueueContext)\n\n  if (context === undefined) {\n    throw new Error('useOrderQueue must be used within a OrderQueueProvider')\n  }\n\n  return (context as unknown) as Context<O>\n}\n","import { useEffect, useState } from 'react'\nimport type { Dispatch } from 'react'\n\nimport { useOrderQueue, useQueueStatus } from '../OrderQueue'\nimport { TASK_CANCELLED_CODE } from '../constants'\nimport type { OrderForm, Message, OrderFormUpdate } from '../typings'\n\nexport interface ToastContext {\n  showToast: (message: string) => void\n  toastState: {\n    isToastVisible?: boolean\n  }\n}\n\nexport interface CreateUseMessagesParams {\n  useToast: () => ToastContext\n  useClearOrderFormMessages: () => (options: {\n    orderFormId: string\n  }) => Promise<any>\n}\n\nexport const createUseMessages = ({\n  useClearOrderFormMessages,\n  useToast,\n}: CreateUseMessagesParams) => {\n  const useOrderFormMessages = (\n    orderForm: OrderForm,\n    setOrderForm: Dispatch<OrderFormUpdate<OrderForm>>\n  ) => {\n    const [messages, setMessages] = useState<Message[]>([])\n    const { showToast, toastState } = useToast()\n    const { enqueue } = useOrderQueue()\n    const queueStatusRef = useQueueStatus()\n    const clearOrderFormMessages = useClearOrderFormMessages()\n\n    useEffect(() => {\n      if (toastState.isToastVisible || !messages.length) {\n        return\n      }\n\n      showToast(messages[0].text!)\n      setMessages((queue) => queue.slice(1))\n    }, [showToast, toastState.isToastVisible, messages])\n\n    useEffect(() => {\n      if (!orderForm.messages?.generalMessages?.length) {\n        return\n      }\n\n      setMessages((prevMessages) =>\n        prevMessages.concat(orderForm.messages?.generalMessages ?? [])\n      )\n\n      setOrderForm((prevOrderForm) => {\n        return {\n          ...prevOrderForm,\n          messages: {\n            ...prevOrderForm.messages,\n            generalMessages: [],\n          },\n        }\n      })\n\n      const enqueuePromise = enqueue(async () => {\n        const { data } = await clearOrderFormMessages({\n          orderFormId: orderForm.id,\n        })\n\n        return data!.clearOrderFormMessages\n      })\n\n      enqueuePromise.then(\n        (updatedOrderForm) => {\n          if (queueStatusRef.current === 'Fulfilled') {\n            setOrderForm(updatedOrderForm)\n          }\n        },\n        (err) => {\n          if (err.code === TASK_CANCELLED_CODE) {\n            return\n          }\n\n          throw err\n        }\n      )\n    }, [\n      clearOrderFormMessages,\n      enqueue,\n      orderForm.id,\n      orderForm.messages,\n      queueStatusRef,\n      setOrderForm,\n    ])\n  }\n\n  return useOrderFormMessages\n}\n","import type { OrderForm } from '../typings'\nimport { UNSYNC_ORDER_FORM_VALUE, DEFAULT_ORDER_FORM_ID } from '../constants'\n\nconst canUseDOM = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n)\n\nconst orderFormOptimizationEnabled =\n  (canUseDOM &&\n    (window as any)?.__RUNTIME__?.settings?.['vtex.store']\n      ?.enableOrderFormOptimization) ??\n  false\n\n/**\n * Heuristic function to determine whether or not the local\n * order form (stored in localStorage) should be replaced by\n * the remote order form.\n */\nexport const shouldUpdateOrderForm = (\n  localOrderForm: OrderForm,\n  remoteOrderForm: OrderForm\n): boolean => {\n  return (\n    localOrderForm.value === UNSYNC_ORDER_FORM_VALUE ||\n    (orderFormOptimizationEnabled &&\n      localOrderForm.id !== remoteOrderForm.id &&\n      localOrderForm.id !== DEFAULT_ORDER_FORM_ID)\n  )\n}\n","import { createContext, useContext } from 'react'\n\nimport { DEFAULT_ORDER_FORM } from '../constants'\nimport type { Context, OrderForm } from '../typings'\n\nconst noop = () => {}\n\nexport const OrderFormContext = createContext<Context<OrderForm>>({\n  orderForm: DEFAULT_ORDER_FORM,\n  setOrderForm: noop,\n  error: undefined,\n  loading: false,\n})\n\nexport function useOrderForm<\n  O extends OrderForm = typeof DEFAULT_ORDER_FORM\n>() {\n  const context = useContext(OrderFormContext)\n\n  if (context === undefined) {\n    throw new Error('useOrderForm must be used within a OrderFormProvider')\n  }\n\n  return context as Context<O>\n}\n","import type { FC } from 'react'\nimport React, { useMemo, useReducer, useEffect, useState } from 'react'\n\nimport { shouldUpdateOrderForm } from '../utils/heuristics'\nimport { DEFAULT_ORDER_FORM_ID, UNSYNC_ORDER_FORM_VALUE } from '../constants'\nimport { useQueueStatus } from '../OrderQueue'\nimport type {\n  OrderForm,\n  OrderFormUpdate,\n  Context,\n  PossibleOrderForms,\n} from '../typings'\nimport type { createUseMessages } from './createUseMessages'\nimport { OrderFormContext } from './OrderForm'\nimport type { LogFn, UseLogger } from './logger'\n\nconst saveLocalOrderForm = (orderForm: OrderForm, log?: LogFn) => {\n  try {\n    if (navigator.cookieEnabled) {\n      localStorage.setItem('orderform', JSON.stringify(orderForm))\n    }\n  } catch (error) {\n    // ignored, can be caused due to quota exceeded\n    // only offline navigation will be affected\n    log?.({\n      type: 'Error',\n      level: 'Critical',\n      event: error,\n      workflowType: 'OrderManager',\n      workflowInstance: 'save-local-orderform',\n    })\n  }\n}\n\nfunction getLocalOrderForm<O>(): O | null {\n  if (typeof document === 'undefined' || !navigator.cookieEnabled) {\n    return null\n  }\n\n  return JSON.parse(localStorage.getItem('orderform') ?? 'null')\n}\n\nfunction reducer<O extends OrderForm>(\n  prevOrderForm: PossibleOrderForms<O>,\n  updateOrderForm: OrderFormUpdate<O>\n): PossibleOrderForms<O> {\n  if (typeof updateOrderForm === 'function') {\n    return {\n      ...prevOrderForm,\n      ...updateOrderForm({\n        ...prevOrderForm,\n        value:\n          prevOrderForm.value === UNSYNC_ORDER_FORM_VALUE\n            ? 0\n            : prevOrderForm.value,\n      }),\n    }\n  }\n\n  return {\n    ...prevOrderForm,\n    ...updateOrderForm,\n  }\n}\n\ninterface GetOrderFormHookArgs<O extends OrderForm> {\n  orderForm: O\n  setOrderForm: (update: OrderFormUpdate<O>) => void\n}\n\nexport interface CreateOrderFormProviderParams<O extends OrderForm> {\n  useOrderFormMessages: ReturnType<typeof createUseMessages>\n  useGetOrderForm: (\n    args: GetOrderFormHookArgs<O>\n  ) => {\n    data?: { orderForm: O }\n    loading: boolean\n    error?: any\n  }\n  defaultOrderForm: O\n  useLogger?: UseLogger\n}\n\nexport function createOrderFormProvider<O extends OrderForm>({\n  useOrderFormMessages,\n  useGetOrderForm,\n  useLogger,\n  defaultOrderForm,\n}: CreateOrderFormProviderParams<O>) {\n  const OrderFormProvider: FC = ({ children }) => {\n    const { log } = useLogger?.() ?? {}\n    const shouldUseLocalOrderForm =\n      typeof document !== 'undefined' && !navigator.onLine\n\n    const [orderForm, setOrderForm] = useReducer(\n      reducer,\n      (shouldUseLocalOrderForm\n        ? getLocalOrderForm<PossibleOrderForms<O>>()\n        : defaultOrderForm) ?? defaultOrderForm\n    )\n\n    const { loading, data, error } = useGetOrderForm({\n      orderForm: orderForm as O,\n      setOrderForm: setOrderForm as React.Dispatch<OrderFormUpdate<O>>,\n    })\n\n    // use a different variable to store the loading state because if some\n    // component uses the `loading` from the Apollo query they won't be perfectly\n    // synchronized with our `orderForm` state and could cause some anomalies.\n    const [orderFormLoading, setOrderFormLoading] = useState(\n      !shouldUseLocalOrderForm\n    )\n\n    const queueStatusRef = useQueueStatus()\n\n    useEffect(() => {\n      if (loading || error || !data) {\n        return\n      }\n\n      const localOrderForm = getLocalOrderForm<PossibleOrderForms<O>>()\n\n      if (localOrderForm != null) {\n        if (\n          !shouldUpdateOrderForm(localOrderForm, data.orderForm) ||\n          // if the queue is fulfilled, we will use the remote order form\n          // regardless of the local status.\n          //\n          // if the queue is pending the remote order form isn't important because\n          // it is expected that when the last task in the queue is finalized, the\n          // component will call `setOrderForm` with the most up-to-date value.\n          queueStatusRef.current !== 'Fulfilled'\n        ) {\n          setOrderFormLoading(false)\n          setOrderForm((prevOrderForm) => {\n            if (prevOrderForm.id !== defaultOrderForm.id) {\n              return prevOrderForm\n            }\n\n            return localOrderForm\n          })\n\n          return\n        }\n      }\n\n      setOrderForm(data.orderForm)\n      setOrderFormLoading(false)\n    }, [data, error, loading, queueStatusRef])\n\n    useEffect(() => {\n      saveLocalOrderForm(orderForm, log)\n    }, [log, orderForm])\n\n    useOrderFormMessages(orderForm, setOrderForm)\n\n    const value = useMemo<Context<OrderForm>>(() => {\n      if (orderForm.id !== DEFAULT_ORDER_FORM_ID) {\n        return {\n          error,\n          orderForm: {\n            ...orderForm,\n            value:\n              orderForm.value === UNSYNC_ORDER_FORM_VALUE ? 0 : orderForm.value,\n            messages: {\n              ...orderForm.messages,\n              generalMessages: [],\n            },\n          },\n          initialFetchComplete: true,\n          setOrderForm,\n          loading: orderFormLoading,\n        }\n      }\n\n      return {\n        error,\n        orderForm: {\n          ...orderForm,\n          value:\n            orderForm.value === UNSYNC_ORDER_FORM_VALUE ? 0 : orderForm.value,\n          messages: {\n            ...orderForm.messages,\n            generalMessages: [],\n          },\n        },\n        initialFetchComplete: false,\n        setOrderForm,\n        loading: orderFormLoading,\n      }\n    }, [error, orderForm, orderFormLoading])\n\n    return (\n      <OrderFormContext.Provider value={value}>\n        {children}\n      </OrderFormContext.Provider>\n    )\n  }\n\n  return { OrderFormProvider }\n}\n","import { createUseMessages } from './modules/createUseMessages'\nimport type { CreateUseMessagesParams } from './modules/createUseMessages'\nimport type { CreateOrderFormProviderParams } from './modules/createOrderForm'\nimport { createOrderFormProvider as createOrderForm } from './modules/createOrderForm'\nimport type { OrderForm } from './typings'\n\ninterface OrderFormProviderSettings<T extends OrderForm>\n  extends CreateUseMessagesParams,\n    Pick<\n      CreateOrderFormProviderParams<T>,\n      Exclude<keyof CreateOrderFormProviderParams<T>, 'useOrderFormMessages'>\n    > {}\n\nexport function createOrderFormProvider<T extends OrderForm>({\n  useToast,\n  useClearOrderFormMessages,\n  useGetOrderForm,\n  useLogger,\n  defaultOrderForm,\n}: OrderFormProviderSettings<T>) {\n  const useOrderFormMessages = createUseMessages({\n    useToast,\n    useClearOrderFormMessages,\n  })\n\n  return createOrderForm<T>({\n    useOrderFormMessages,\n    useGetOrderForm,\n    useLogger,\n    defaultOrderForm,\n  })\n}\n\nexport default { createOrderFormProvider }\n"],"names":["noop","createContext","useState","useRef","useLayoutEffect","useMemo","React","useContext","useEffect","createOrderFormProvider","useReducer","createOrderForm"],"mappings":"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"}