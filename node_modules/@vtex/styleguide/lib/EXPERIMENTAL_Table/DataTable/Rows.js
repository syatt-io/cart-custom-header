"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _uuid = require("uuid");

var _uuid2 = _interopRequireDefault(_uuid);

var _constants = require("../constants");

var _Row = require("./Row");

var _Row2 = _interopRequireDefault(_Row);

var _CellPrefix = require("./CellPrefix");

var _CellPrefix2 = _interopRequireDefault(_CellPrefix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Rows = function Rows(_ref) {
  var columns = _ref.columns,
      items = _ref.items,
      onRowClick = _ref.onRowClick,
      cellProps = _ref.cellProps,
      rowProps = _ref.rowProps,
      isRowActive = _ref.isRowActive,
      rowHeight = _ref.rowHeight,
      selectedDensity = _ref.selectedDensity,
      checkboxes = _ref.checkboxes;

  var renderRow = function renderRow(rowData) {
    var toggleChecked = function toggleChecked() {
      return checkboxes.toggle(rowData);
    };

    var isRowChecked = checkboxes && checkboxes.isChecked(rowData);
    var isRowPartiallyChecked = checkboxes && checkboxes.isPartiallyChecked(rowData);
    var isRowSelected = isRowChecked || isRowPartiallyChecked;
    var clickable = onRowClick ? {
      onClick: function onClick() {
        return onRowClick({
          rowData: rowData
        });
      }
    } : {};
    return _react2.default.createElement(_Row2.default, _extends({}, rowProps, clickable, {
      height: rowHeight,
      active: isRowActive && isRowActive(rowData) || isRowSelected,
      key: _constants.NAMESPACES.ROW + "-" + (0, _uuid2.default)()
    }), columns.map(function (column, cellIndex) {
      var cellRenderer = column.cellRenderer,
          width = column.width;
      var cellData = rowData[column.id];
      var content = cellRenderer ? cellRenderer({
        cellData: cellData,
        rowData: rowData,
        rowHeight: rowHeight,
        selectedDensity: selectedDensity
      }) : cellData;
      return _react2.default.createElement(_Row2.default.Cell, _extends({}, cellProps, {
        key: "cel-" + (0, _uuid2.default)(),
        width: width
      }), cellIndex === 0 && _react2.default.createElement(_CellPrefix2.default, null, checkboxes && _react2.default.createElement("span", {
        className: "ph3"
      }, _react2.default.createElement(_CellPrefix2.default.Checkbox, {
        checked: isRowChecked,
        partial: isRowPartiallyChecked,
        onClick: toggleChecked
      }))), content);
    }));
  };

  return _react2.default.createElement(_react2.default.Fragment, null, items && items.map(renderRow));
};

exports.default = _react2.default.memo(Rows);