"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DENSITY_OPTIONS = exports.DesitySizes = exports.Density = exports.TABLE_HEADER_HEIGHT = undefined;
exports.default = useTableMeasures;
exports.calculateTableHeight = calculateTableHeight;
exports.getScrollbarWidth = getScrollbarWidth;
exports.getRowHeight = getRowHeight;

var _react = require("react");

var DEFAULT_SCROLLBAR_WIDTH = 17;
var EMPTY_STATE_SIZE_IN_ROWS = 5;
var TABLE_HEADER_HEIGHT = exports.TABLE_HEADER_HEIGHT = 36;

function useTableMeasures(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 0 : _ref$size,
      _ref$density = _ref.density,
      density = _ref$density === void 0 ? Density.MEDIUM : _ref$density;

  var _useState = (0, _react.useState)(density),
      selectedDensity = _useState[0],
      setSelectedDensity = _useState[1];

  var rowHeight = (0, _react.useMemo)(function () {
    return getRowHeight(selectedDensity);
  }, [selectedDensity]);
  var tableHeight = (0, _react.useMemo)(function () {
    return calculateTableHeight(rowHeight, size);
  }, [size, selectedDensity]);
  return {
    selectedDensity: selectedDensity,
    rowHeight: rowHeight,
    tableHeight: tableHeight,
    setSelectedDensity: setSelectedDensity
  };
}

function calculateTableHeight(rowHeight, tableSize) {
  var multiplicator = tableSize !== 0 ? tableSize : EMPTY_STATE_SIZE_IN_ROWS;
  return TABLE_HEADER_HEIGHT + rowHeight * multiplicator + getScrollbarWidth();
}

function getScrollbarWidth() {
  if (!window || !document || !document.documentElement) return DEFAULT_SCROLLBAR_WIDTH;
  var scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
  return isNaN(scrollbarWidth) ? DEFAULT_SCROLLBAR_WIDTH : scrollbarWidth;
}

var Density = exports.Density = undefined;

(function (Density) {
  Density["LOW"] = "low";
  Density["MEDIUM"] = "medium";
  Density["HIGH"] = "high";
})(Density || (exports.Density = Density = {}));

var DesitySizes = exports.DesitySizes = undefined;

(function (DesitySizes) {
  DesitySizes[DesitySizes["low"] = 76] = "low";
  DesitySizes[DesitySizes["medium"] = 48] = "medium";
  DesitySizes[DesitySizes["high"] = 32] = "high";
})(DesitySizes || (exports.DesitySizes = DesitySizes = {}));

var DENSITY_OPTIONS = exports.DENSITY_OPTIONS = [Density.LOW, Density.MEDIUM, Density.HIGH];

function getRowHeight(density) {
  switch (density) {
    case Density.LOW:
      return DesitySizes.low;

    case Density.MEDIUM:
      return DesitySizes.medium;

    case Density.HIGH:
      return DesitySizes.high;
  }
}