"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkboxesPropTypes = undefined;
exports.default = useCheckboxTree;

var _react = require("react");

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _isEmpty = require("lodash/isEmpty");

var _isEmpty2 = _interopRequireDefault(_isEmpty);

var _util = require("./util");

var _constants = require("./constants");

var _reducer = require("./reducer");

var _reducer2 = _interopRequireDefault(_reducer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function useCheckboxTree(_ref) {
  var items = _ref.items,
      onToggle = _ref.onToggle,
      _ref$nodesKey = _ref.nodesKey,
      nodesKey = _ref$nodesKey === void 0 ? 'children' : _ref$nodesKey,
      _ref$checked = _ref.checked,
      checked = _ref$checked === void 0 ? [] : _ref$checked,
      _ref$comparator = _ref.comparator,
      comparator = _ref$comparator === void 0 ? _constants.defaultComparatorCurry : _ref$comparator;

  var _useReducer = (0, _react.useReducer)(_reducer2.default, checked),
      checkedItems = _useReducer[0],
      dispatch = _useReducer[1];

  var itemTree = (0, _react.useMemo)(function () {
    var _ref2;

    return _ref2 = {}, _ref2[_constants.ROOT_KEY] = _constants.ROOT_VALUE, _ref2[nodesKey] = items, _ref2;
  }, [items]);
  var toggle = (0, _react.useCallback)(function (item) {
    dispatch({
      type: _reducer.ActionType.Toggle,
      itemToToggle: {
        item: item,
        nodesKey: nodesKey,
        comparator: comparator
      }
    });
  }, [checkedItems]);
  (0, _react.useEffect)(function () {
    onToggle && onToggle({
      checkedItems: checkedItems
    });
  }, [toggle]);
  (0, _react.useEffect)(function () {
    var shake = function shake(tree) {
      var childNodes = tree[nodesKey];
      if (!childNodes || (0, _isEmpty2.default)(childNodes)) return;
      var areChildsChecked = childNodes.every(function (child) {
        return checkedItems.some(comparator(child));
      });
      var isRootChecked = checkedItems.some(comparator(tree));
      if (areChildsChecked && !isRootChecked) dispatch({
        type: _reducer.ActionType.Check,
        item: tree
      });
      if (!areChildsChecked && isRootChecked) dispatch({
        type: _reducer.ActionType.Uncheck,
        itemToToggle: {
          item: tree,
          comparator: comparator
        }
      });
      childNodes.forEach(shake);
    };

    shake(itemTree);
  }, [checkedItems]);
  var isChecked = (0, _react.useCallback)(function (item) {
    var children = item[nodesKey];
    return children && !(0, _isEmpty2.default)(children) ? children.every(function (child) {
      return checkedItems.some(comparator(child));
    }) : checkedItems.some(comparator(item));
  }, [checkedItems]);
  var isPartiallyChecked = (0, _react.useCallback)(function (item) {
    return item[nodesKey] && (0, _util.getFlat)(item, [], nodesKey).slice(1).some(function (child) {
      return checkedItems.some(comparator(child));
    });
  }, [checkedItems]);
  var allChecked = (0, _react.useMemo)(function () {
    return isChecked(itemTree);
  }, [checkedItems]);
  var someChecked = (0, _react.useMemo)(function () {
    return checkedItems.length > 0;
  }, [checkedItems]);
  var check = (0, _react.useCallback)(function (item) {
    dispatch({
      type: _reducer.ActionType.BulkCheck,
      itemToToggle: {
        item: item,
        comparator: comparator,
        nodesKey: nodesKey
      }
    });
  }, [checkedItems]);
  var checkAll = (0, _react.useCallback)(function () {
    check(itemTree);
  }, [checkedItems]);
  var uncheck = (0, _react.useCallback)(function (item) {
    dispatch({
      type: _reducer.ActionType.BulkUncheck,
      itemToToggle: {
        item: item,
        comparator: comparator,
        nodesKey: nodesKey
      }
    });
  }, [checkedItems]);
  var uncheckAll = (0, _react.useCallback)(function () {
    uncheck(itemTree);
  }, [checkedItems]);
  return {
    checkedItems: checkedItems,
    isChecked: isChecked,
    allChecked: allChecked,
    someChecked: someChecked,
    isPartiallyChecked: isPartiallyChecked,
    itemTree: itemTree,
    toggle: toggle,
    check: check,
    checkAll: checkAll,
    uncheck: uncheck,
    uncheckAll: uncheckAll
  };
}

var checkboxesPropTypes = exports.checkboxesPropTypes = {
  checkboxes: _propTypes2.default.shape({
    checkedItems: _propTypes2.default.arrayOf(_propTypes2.default.shape({
      id: _propTypes2.default.string
    })),
    itemTree: _propTypes2.default.shape({
      id: _propTypes2.default.string
    }),
    toggle: _propTypes2.default.func,
    isChecked: _propTypes2.default.func,
    isPartiallyChecked: _propTypes2.default.func
  })
};