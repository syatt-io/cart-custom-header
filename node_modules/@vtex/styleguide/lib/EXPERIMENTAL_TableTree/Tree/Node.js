"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _uuid = require("uuid");

var _uuid2 = _interopRequireDefault(_uuid);

var _isEmpty = require("lodash/isEmpty");

var _isEmpty2 = _interopRequireDefault(_isEmpty);

var _CellPrefix = require("../../EXPERIMENTAL_Table/DataTable/CellPrefix");

var _CellPrefix2 = _interopRequireDefault(_CellPrefix);

var _Row = require("../../EXPERIMENTAL_Table/DataTable/Row");

var _Row2 = _interopRequireDefault(_Row);

var _CollapseToggle = require("./CollapseToggle");

var _CollapseToggle2 = _interopRequireDefault(_CollapseToggle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Node = function Node(_ref) {
  var columns = _ref.columns,
      rowHeight = _ref.rowHeight,
      nodesKey = _ref.nodesKey,
      checkboxes = _ref.checkboxes,
      toggleCollapsed = _ref.toggleCollapsed,
      isCollapsed = _ref.isCollapsed,
      data = _ref.data,
      depth = _ref.depth,
      selectedDensity = _ref.selectedDensity,
      onRowClick = _ref.onRowClick;
  var toggleChildren = (0, _react.useCallback)(function () {
    return toggleCollapsed(data);
  }, [data]);
  var toggleChecked = (0, _react.useCallback)(function () {
    return checkboxes.toggle(data);
  }, [data]);
  var isRowChecked = checkboxes && checkboxes.isChecked(data);
  var isRowPartiallyChecked = checkboxes && checkboxes.isPartiallyChecked(data);
  var isRowSelected = isRowChecked || isRowPartiallyChecked;
  var hasChildren = data[nodesKey] && !(0, _isEmpty2.default)(data[nodesKey]);
  var clickableRow = onRowClick ? {
    onClick: function onClick() {
      return onRowClick({
        rowData: data
      });
    }
  } : undefined;
  var clickableCell = hasChildren ? !!clickableRow ? undefined : {
    onClick: toggleChildren
  } : undefined;

  var renderPrefix = function renderPrefix(hasChild) {
    return _react2.default.createElement(_CellPrefix2.default, {
      depth: depth
    }, hasChild && _react2.default.createElement(_CollapseToggle2.default, {
      collapsed: isCollapsed(data),
      onClick: toggleChildren
    }), checkboxes && _react2.default.createElement("span", {
      className: "ph3"
    }, _react2.default.createElement(_CellPrefix2.default.Checkbox, {
      checked: isRowChecked,
      partial: isRowPartiallyChecked,
      onClick: toggleChecked
    })));
  };

  var renderCells = function renderCells(hasChild) {
    return _react2.default.createElement(_Row2.default, _extends({}, clickableRow, {
      height: rowHeight,
      active: isRowSelected
    }), columns.map(function (column, cellIndex) {
      var cellRenderer = column.cellRenderer,
          width = column.width;
      var cellData = data[column.id];
      var content = cellRenderer ? cellRenderer({
        cellData: cellData,
        rowData: data,
        rowHeight: rowHeight,
        selectedDensity: selectedDensity
      }) : cellData;
      return cellIndex === 0 ? _react2.default.createElement(_Row2.default.Cell, _extends({}, clickableCell, {
        key: "cel-" + (0, _uuid2.default)(),
        width: width
      }), renderPrefix(hasChild), content) : _react2.default.createElement(_Row2.default.Cell, {
        key: "cel-" + (0, _uuid2.default)(),
        width: width
      }, content);
    }));
  };

  return hasChildren ? _react2.default.createElement(_react2.default.Fragment, null, renderCells(true), isCollapsed(data) && data[nodesKey].map(function (data) {
    return _react2.default.createElement(Node, {
      onRowClick: onRowClick,
      selectedDensity: selectedDensity,
      isCollapsed: isCollapsed,
      toggleCollapsed: toggleCollapsed,
      checkboxes: checkboxes,
      nodesKey: nodesKey,
      rowHeight: rowHeight,
      columns: columns,
      key: "row-child-" + (0, _uuid2.default)(),
      depth: depth + 1,
      data: data
    });
  })) : renderCells();
};

Node.defaultProps = {
  depth: 0
};
exports.default = Node;